<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Daniel Dulaney</title><link>https://danieldulaney.com/posts/</link><description>Recent content in Posts on Daniel Dulaney</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 17 Jul 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://danieldulaney.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Interior Mutability in Rust using UnsafeCell (Part 2)</title><link>https://danieldulaney.com/posts/arraylist-part-2/</link><pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate><guid>https://danieldulaney.com/posts/arraylist-part-2/</guid><description>At the end of part 1, we had just about finished implementing AppendList, an array of arrays that let you push new elements on through an immutable reference.
It worked pretty well! There were a bunch of chunks that were all the same size, and it was pretty easy to figure out which index was in each chunk. But there&amp;rsquo;s a downside: somebody needs to pick what chunk size to use.</description></item><item><title>Interior Mutability in Rust using UnsafeCell (Part 1)</title><link>https://danieldulaney.com/posts/arraylist-part-1/</link><pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate><guid>https://danieldulaney.com/posts/arraylist-part-1/</guid><description>Rust&amp;rsquo;s borrow checker is a powerful tool. It makes sure your code is safe by enforcing two rules:
Multiple immutable references or one mutable reference at a time, but not both. References must always be valid. Pretty much everyone who writes Rust has, at some point, tried to do some simple list manipulation&amp;hellip;
let mut list = Vec::new(); // Add an item, then borrow it list.push(1); let first_item = &amp;amp;list[0]; // Oh no, we&amp;#39;re modifying the list while it&amp;#39;s borrowed!</description></item></channel></rss>